from django import forms
from django.core.exceptions import ValidationError

from .models import Product, Category, Tag


class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = ['name', 'description', 'price', 'image', 'category', 'tags']

    def clean_price(self):
        price = self.cleaned_data['price']
        if price < 1:
            raise ValidationError("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0.")
        return price

    def clean_name(self):
        name = self.cleaned_data['name']
        if len(name) < 3:
            raise ValidationError("–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.")
        if not name.isalnum():
            raise ValidationError("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã.")
        return name

    def clean_description(self):
        description = self.cleaned_data['description']
        if len(description) < 10:
            raise ValidationError("–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤.")
        if len(description) > 150:
            raise ValidationError("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        if 'üòä' in description or 'üòÑ' in description:
            raise ValidationError("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–º–∞–π–ª–∏–∫–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.")
        return description

    def clean_image(self):
        image = self.cleaned_data.get('image', False)
        if image:
            if image.content_type == 'image/gif':
                raise ValidationError("–ó–∞–≥—Ä—É–∑–∫–∞ GIF –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞.")
        return image


class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = ['name', 'description']

    def clean_name(self):
        name = self.cleaned_data['name']
        if len(name) < 2:
            raise ValidationError("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 2 —Å–∏–º–≤–æ–ª–æ–≤.")
        return name

    def clean_description(self):
        description = self.cleaned_data['description']
        if len(description) < 5:
            raise ValidationError("–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤.")
        return description


class TagForm(forms.ModelForm):
    class Meta:
        model = Tag
        fields = ['name']

    def clean_name(self):
        name = self.cleaned_data['name']
        if not name[0].isalpha():
            raise ValidationError("–ò–º—è —Ç–µ–≥–∞ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã.")
        return name
